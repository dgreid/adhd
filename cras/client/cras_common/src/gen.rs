/*
 * automatically generated by rust-bindgen
 * From files in cras/src/common in adhd:
 * cras_audio_format.h
 * cras_iodev_info.h
 * cras_messages.h
 * cras_types.h
 *
 * at commit
 * 5fd5e32c111ad28da0bb860d023b281ae16c2094
 */

pub const CRAS_IODEV_NAME_BUFFER_SIZE: u32 = 64;
pub const CRAS_NODE_TYPE_BUFFER_SIZE: u32 = 32;
pub const CRAS_NODE_MIC_POS_BUFFER_SIZE: u32 = 128;
pub const CRAS_NODE_NAME_BUFFER_SIZE: u32 = 64;
pub const CRAS_NODE_HOTWORD_MODEL_BUFFER_SIZE: u32 = 16;
pub const CRAS_MAX_IODEVS: u32 = 20;
pub const CRAS_MAX_IONODES: u32 = 20;
pub const CRAS_MAX_ATTACHED_CLIENTS: u32 = 20;
pub const CRAS_MAX_AUDIO_THREAD_SNAPSHOTS: u32 = 10;
pub const CRAS_MAX_HOTWORD_MODEL_NAME_SIZE: u32 = 8;
pub const CRAS_SERVER_STATE_VERSION: u32 = 2;
pub const CRAS_PROTO_VER: u32 = 2;
pub const CRAS_SERV_MAX_MSG_SIZE: u32 = 256;
pub const CRAS_CLIENT_MAX_MSG_SIZE: u32 = 256;
pub const CRAS_HOTWORD_NAME_MAX_SIZE: u32 = 8;
pub const CRAS_MAX_HOTWORD_MODELS: u32 = 244;
pub const CRAS_MAX_REMIX_CHANNELS: u32 = 32;
pub const CRAS_MAX_TEST_DATA_LEN: u32 = 224;
pub const CRAS_AEC_DUMP_FILE_NAME_LEN: u32 = 128;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct cras_iodev_info {
    pub idx: u32,
    pub name: [::std::os::raw::c_char; 64usize],
    pub stable_id: u32,
    pub stable_id_new: u32,
}
#[test]
fn bindgen_test_layout_cras_iodev_info() {
    assert_eq!(
        ::std::mem::size_of::<cras_iodev_info>(),
        76usize,
        concat!("Size of: ", stringify!(cras_iodev_info))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_iodev_info>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_iodev_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_iodev_info>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_iodev_info),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_iodev_info>())).name as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_iodev_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_iodev_info>())).stable_id as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_iodev_info),
            "::",
            stringify!(stable_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_iodev_info>())).stable_id_new as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_iodev_info),
            "::",
            stringify!(stable_id_new)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct cras_ionode_info {
    pub iodev_idx: u32,
    pub ionode_idx: u32,
    pub plugged: i32,
    pub active: i32,
    pub plugged_time: cras_ionode_info__bindgen_ty_1,
    pub volume: u32,
    pub capture_gain: i32,
    pub left_right_swapped: i32,
    pub type_enum: u32,
    pub stable_id: u32,
    pub stable_id_new: u32,
    pub mic_positions: [::std::os::raw::c_char; 128usize],
    pub type_: [::std::os::raw::c_char; 32usize],
    pub name: [::std::os::raw::c_char; 64usize],
    pub active_hotword_model: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cras_ionode_info__bindgen_ty_1 {
    pub tv_sec: i64,
    pub tv_usec: i64,
}
#[test]
fn bindgen_test_layout_cras_ionode_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cras_ionode_info__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cras_ionode_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_ionode_info__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cras_ionode_info__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_ionode_info__bindgen_ty_1>())).tv_sec as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_ionode_info__bindgen_ty_1),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_ionode_info__bindgen_ty_1>())).tv_usec as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_ionode_info__bindgen_ty_1),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[test]
fn bindgen_test_layout_cras_ionode_info() {
    assert_eq!(
        ::std::mem::size_of::<cras_ionode_info>(),
        296usize,
        concat!("Size of: ", stringify!(cras_ionode_info))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_ionode_info>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_ionode_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_ionode_info>())).iodev_idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_ionode_info),
            "::",
            stringify!(iodev_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_ionode_info>())).ionode_idx as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_ionode_info),
            "::",
            stringify!(ionode_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_ionode_info>())).plugged as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_ionode_info),
            "::",
            stringify!(plugged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_ionode_info>())).active as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_ionode_info),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_ionode_info>())).plugged_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_ionode_info),
            "::",
            stringify!(plugged_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_ionode_info>())).volume as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_ionode_info),
            "::",
            stringify!(volume)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_ionode_info>())).capture_gain as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_ionode_info),
            "::",
            stringify!(capture_gain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_ionode_info>())).left_right_swapped as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_ionode_info),
            "::",
            stringify!(left_right_swapped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_ionode_info>())).type_enum as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_ionode_info),
            "::",
            stringify!(type_enum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_ionode_info>())).stable_id as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_ionode_info),
            "::",
            stringify!(stable_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_ionode_info>())).stable_id_new as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_ionode_info),
            "::",
            stringify!(stable_id_new)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_ionode_info>())).mic_positions as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_ionode_info),
            "::",
            stringify!(mic_positions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_ionode_info>())).type_ as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_ionode_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_ionode_info>())).name as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_ionode_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_ionode_info>())).active_hotword_model as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_ionode_info),
            "::",
            stringify!(active_hotword_model)
        )
    );
}
pub const ionode_attr_IONODE_ATTR_PLUGGED: ionode_attr = 0;
pub const ionode_attr_IONODE_ATTR_VOLUME: ionode_attr = 1;
pub const ionode_attr_IONODE_ATTR_CAPTURE_GAIN: ionode_attr = 2;
pub const ionode_attr_IONODE_ATTR_SWAP_LEFT_RIGHT: ionode_attr = 3;
pub type ionode_attr = u32;
pub type __time_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub mod _snd_pcm_format {
    pub type Type = i32;
    pub const SND_PCM_FORMAT_UNKNOWN: Type = -1;
    pub const SND_PCM_FORMAT_S8: Type = 0;
    pub const SND_PCM_FORMAT_U8: Type = 1;
    pub const SND_PCM_FORMAT_S16_LE: Type = 2;
    pub const SND_PCM_FORMAT_S16_BE: Type = 3;
    pub const SND_PCM_FORMAT_U16_LE: Type = 4;
    pub const SND_PCM_FORMAT_U16_BE: Type = 5;
    pub const SND_PCM_FORMAT_S24_LE: Type = 6;
    pub const SND_PCM_FORMAT_S24_BE: Type = 7;
    pub const SND_PCM_FORMAT_U24_LE: Type = 8;
    pub const SND_PCM_FORMAT_U24_BE: Type = 9;
    pub const SND_PCM_FORMAT_S32_LE: Type = 10;
    pub const SND_PCM_FORMAT_S32_BE: Type = 11;
    pub const SND_PCM_FORMAT_U32_LE: Type = 12;
    pub const SND_PCM_FORMAT_U32_BE: Type = 13;
    pub const SND_PCM_FORMAT_FLOAT_LE: Type = 14;
    pub const SND_PCM_FORMAT_FLOAT_BE: Type = 15;
    pub const SND_PCM_FORMAT_FLOAT64_LE: Type = 16;
    pub const SND_PCM_FORMAT_FLOAT64_BE: Type = 17;
    pub const SND_PCM_FORMAT_IEC958_SUBFRAME_LE: Type = 18;
    pub const SND_PCM_FORMAT_IEC958_SUBFRAME_BE: Type = 19;
    pub const SND_PCM_FORMAT_MU_LAW: Type = 20;
    pub const SND_PCM_FORMAT_A_LAW: Type = 21;
    pub const SND_PCM_FORMAT_IMA_ADPCM: Type = 22;
    pub const SND_PCM_FORMAT_MPEG: Type = 23;
    pub const SND_PCM_FORMAT_GSM: Type = 24;
    pub const SND_PCM_FORMAT_S20_LE: Type = 25;
    pub const SND_PCM_FORMAT_S20_BE: Type = 26;
    pub const SND_PCM_FORMAT_U20_LE: Type = 27;
    pub const SND_PCM_FORMAT_U20_BE: Type = 28;
    pub const SND_PCM_FORMAT_SPECIAL: Type = 31;
    pub const SND_PCM_FORMAT_S24_3LE: Type = 32;
    pub const SND_PCM_FORMAT_S24_3BE: Type = 33;
    pub const SND_PCM_FORMAT_U24_3LE: Type = 34;
    pub const SND_PCM_FORMAT_U24_3BE: Type = 35;
    pub const SND_PCM_FORMAT_S20_3LE: Type = 36;
    pub const SND_PCM_FORMAT_S20_3BE: Type = 37;
    pub const SND_PCM_FORMAT_U20_3LE: Type = 38;
    pub const SND_PCM_FORMAT_U20_3BE: Type = 39;
    pub const SND_PCM_FORMAT_S18_3LE: Type = 40;
    pub const SND_PCM_FORMAT_S18_3BE: Type = 41;
    pub const SND_PCM_FORMAT_U18_3LE: Type = 42;
    pub const SND_PCM_FORMAT_U18_3BE: Type = 43;
    pub const SND_PCM_FORMAT_G723_24: Type = 44;
    pub const SND_PCM_FORMAT_G723_24_1B: Type = 45;
    pub const SND_PCM_FORMAT_G723_40: Type = 46;
    pub const SND_PCM_FORMAT_G723_40_1B: Type = 47;
    pub const SND_PCM_FORMAT_DSD_U8: Type = 48;
    pub const SND_PCM_FORMAT_DSD_U16_LE: Type = 49;
    pub const SND_PCM_FORMAT_DSD_U32_LE: Type = 50;
    pub const SND_PCM_FORMAT_DSD_U16_BE: Type = 51;
    pub const SND_PCM_FORMAT_DSD_U32_BE: Type = 52;
    pub const SND_PCM_FORMAT_LAST: Type = 52;
    pub const SND_PCM_FORMAT_S16: Type = 2;
    pub const SND_PCM_FORMAT_U16: Type = 4;
    pub const SND_PCM_FORMAT_S24: Type = 6;
    pub const SND_PCM_FORMAT_U24: Type = 8;
    pub const SND_PCM_FORMAT_S32: Type = 10;
    pub const SND_PCM_FORMAT_U32: Type = 12;
    pub const SND_PCM_FORMAT_FLOAT: Type = 14;
    pub const SND_PCM_FORMAT_FLOAT64: Type = 16;
    pub const SND_PCM_FORMAT_IEC958_SUBFRAME: Type = 18;
    pub const SND_PCM_FORMAT_S20: Type = 25;
    pub const SND_PCM_FORMAT_U20: Type = 27;
}
pub use self::_snd_pcm_format::Type as snd_pcm_format_t;
pub mod CRAS_CHANNEL {
    pub type Type = u32;
    pub const CRAS_CH_FL: Type = 0;
    pub const CRAS_CH_FR: Type = 1;
    pub const CRAS_CH_RL: Type = 2;
    pub const CRAS_CH_RR: Type = 3;
    pub const CRAS_CH_FC: Type = 4;
    pub const CRAS_CH_LFE: Type = 5;
    pub const CRAS_CH_SL: Type = 6;
    pub const CRAS_CH_SR: Type = 7;
    pub const CRAS_CH_RC: Type = 8;
    pub const CRAS_CH_FLC: Type = 9;
    pub const CRAS_CH_FRC: Type = 10;
    pub const CRAS_CH_MAX: Type = 11;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cras_audio_format {
    pub format: snd_pcm_format_t,
    pub frame_rate: usize,
    pub num_channels: usize,
    pub channel_layout: [i8; 11usize],
}
#[test]
fn bindgen_test_layout_cras_audio_format() {
    assert_eq!(
        ::std::mem::size_of::<cras_audio_format>(),
        40usize,
        concat!("Size of: ", stringify!(cras_audio_format))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_audio_format>(),
        8usize,
        concat!("Alignment of ", stringify!(cras_audio_format))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_audio_format>())).format as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_audio_format),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_audio_format>())).frame_rate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_audio_format),
            "::",
            stringify!(frame_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_audio_format>())).num_channels as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_audio_format),
            "::",
            stringify!(num_channels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_audio_format>())).channel_layout as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_audio_format),
            "::",
            stringify!(channel_layout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_audio_format_packed {
    pub format: i32,
    pub frame_rate: u32,
    pub num_channels: u32,
    pub channel_layout: [i8; 11usize],
}
#[test]
fn bindgen_test_layout_cras_audio_format_packed() {
    assert_eq!(
        ::std::mem::size_of::<cras_audio_format_packed>(),
        23usize,
        concat!("Size of: ", stringify!(cras_audio_format_packed))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_audio_format_packed>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_audio_format_packed))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_audio_format_packed>())).format as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_audio_format_packed),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_audio_format_packed>())).frame_rate as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_audio_format_packed),
            "::",
            stringify!(frame_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_audio_format_packed>())).num_channels as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_audio_format_packed),
            "::",
            stringify!(num_channels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_audio_format_packed>())).channel_layout as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_audio_format_packed),
            "::",
            stringify!(channel_layout)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_timespec {
    pub tv_sec: i64,
    pub tv_nsec: i64,
}
#[test]
fn bindgen_test_layout_cras_timespec() {
    assert_eq!(
        ::std::mem::size_of::<cras_timespec>(),
        16usize,
        concat!("Size of: ", stringify!(cras_timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_timespec>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub mod CRAS_SPECIAL_DEVICE {
    pub type Type = u32;
    pub const NO_DEVICE: Type = 0;
    pub const SILENT_RECORD_DEVICE: Type = 1;
    pub const SILENT_PLAYBACK_DEVICE: Type = 2;
    pub const SILENT_HOTWORD_DEVICE: Type = 3;
    pub const MAX_SPECIAL_DEVICE_IDX: Type = 4;
}
pub const TEST_IODEV_TYPE_TEST_IODEV_HOTWORD: TEST_IODEV_TYPE = 0;
pub type TEST_IODEV_TYPE = u32;
pub mod CRAS_TEST_IODEV_CMD {
    pub type Type = u32;
    pub const TEST_IODEV_CMD_HOTWORD_TRIGGER: Type = 0;
}
pub mod CRAS_STREAM_DIRECTION {
    pub type Type = u32;
    pub const CRAS_STREAM_OUTPUT: Type = 0;
    pub const CRAS_STREAM_INPUT: Type = 1;
    pub const CRAS_STREAM_UNDEFINED: Type = 2;
    pub const CRAS_STREAM_POST_MIX_PRE_DSP: Type = 3;
    pub const CRAS_NUM_DIRECTIONS: Type = 4;
}
pub mod CRAS_INPUT_STREAM_FLAG {
    pub type Type = u32;
    pub const BULK_AUDIO_OK: Type = 1;
    pub const USE_DEV_TIMING: Type = 2;
    pub const HOTWORD_STREAM: Type = 3;
    pub const TRIGGER_ONLY: Type = 4;
    pub const SERVER_ONLY: Type = 8;
}
pub mod CRAS_LOOPBACK_TYPE {
    pub type Type = u32;
    pub const LOOPBACK_POST_MIX_PRE_DSP: Type = 0;
    pub const LOOPBACK_POST_DSP: Type = 1;
    pub const LOOPBACK_NUM_TYPES: Type = 2;
}
pub mod CRAS_STREAM_TYPE {
    pub type Type = u32;
    pub const CRAS_STREAM_TYPE_DEFAULT: Type = 0;
    pub const CRAS_STREAM_TYPE_MULTIMEDIA: Type = 1;
    pub const CRAS_STREAM_TYPE_VOICE_COMMUNICATION: Type = 2;
    pub const CRAS_STREAM_TYPE_SPEECH_RECOGNITION: Type = 3;
    pub const CRAS_STREAM_TYPE_PRO_AUDIO: Type = 4;
    pub const CRAS_STREAM_TYPE_ACCESSIBILITY: Type = 5;
    pub const CRAS_STREAM_NUM_TYPES: Type = 6;
}
pub mod CRAS_STREAM_EFFECT {
    pub type Type = u32;
    pub const APM_ECHO_CANCELLATION: Type = 1;
    pub const APM_NOISE_SUPRESSION: Type = 2;
    pub const APM_GAIN_CONTROL: Type = 4;
    pub const APM_VOICE_DETECTION: Type = 8;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_attached_client_info {
    pub id: u32,
    pub pid: i32,
    pub uid: u32,
    pub gid: u32,
}
#[test]
fn bindgen_test_layout_cras_attached_client_info() {
    assert_eq!(
        ::std::mem::size_of::<cras_attached_client_info>(),
        16usize,
        concat!("Size of: ", stringify!(cras_attached_client_info))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_attached_client_info>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_attached_client_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_attached_client_info>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_attached_client_info),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_attached_client_info>())).pid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_attached_client_info),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_attached_client_info>())).uid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_attached_client_info),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_attached_client_info>())).gid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_attached_client_info),
            "::",
            stringify!(gid)
        )
    );
}
pub type cras_node_id_t = u64;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct audio_thread_event {
    pub tag_sec: u32,
    pub nsec: u32,
    pub data1: u32,
    pub data2: u32,
    pub data3: u32,
}
#[test]
fn bindgen_test_layout_audio_thread_event() {
    assert_eq!(
        ::std::mem::size_of::<audio_thread_event>(),
        20usize,
        concat!("Size of: ", stringify!(audio_thread_event))
    );
    assert_eq!(
        ::std::mem::align_of::<audio_thread_event>(),
        1usize,
        concat!("Alignment of ", stringify!(audio_thread_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_thread_event>())).tag_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_thread_event),
            "::",
            stringify!(tag_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_thread_event>())).nsec as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_thread_event),
            "::",
            stringify!(nsec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_thread_event>())).data1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_thread_event),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_thread_event>())).data2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_thread_event),
            "::",
            stringify!(data2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_thread_event>())).data3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_thread_event),
            "::",
            stringify!(data3)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct audio_thread_event_log {
    pub write_pos: u32,
    pub len: u32,
    pub log: [audio_thread_event; 6144usize],
}
#[test]
fn bindgen_test_layout_audio_thread_event_log() {
    assert_eq!(
        ::std::mem::size_of::<audio_thread_event_log>(),
        122888usize,
        concat!("Size of: ", stringify!(audio_thread_event_log))
    );
    assert_eq!(
        ::std::mem::align_of::<audio_thread_event_log>(),
        1usize,
        concat!("Alignment of ", stringify!(audio_thread_event_log))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_thread_event_log>())).write_pos as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_thread_event_log),
            "::",
            stringify!(write_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_thread_event_log>())).len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_thread_event_log),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_thread_event_log>())).log as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_thread_event_log),
            "::",
            stringify!(log)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct audio_dev_debug_info {
    pub dev_name: [::std::os::raw::c_char; 64usize],
    pub buffer_size: u32,
    pub min_buffer_level: u32,
    pub min_cb_level: u32,
    pub max_cb_level: u32,
    pub frame_rate: u32,
    pub num_channels: u32,
    pub est_rate_ratio: f64,
    pub direction: u8,
    pub num_underruns: u32,
    pub num_severe_underruns: u32,
    pub highest_hw_level: u32,
}
#[test]
fn bindgen_test_layout_audio_dev_debug_info() {
    assert_eq!(
        ::std::mem::size_of::<audio_dev_debug_info>(),
        109usize,
        concat!("Size of: ", stringify!(audio_dev_debug_info))
    );
    assert_eq!(
        ::std::mem::align_of::<audio_dev_debug_info>(),
        1usize,
        concat!("Alignment of ", stringify!(audio_dev_debug_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_dev_debug_info>())).dev_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_dev_debug_info),
            "::",
            stringify!(dev_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_dev_debug_info>())).buffer_size as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_dev_debug_info),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_dev_debug_info>())).min_buffer_level as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_dev_debug_info),
            "::",
            stringify!(min_buffer_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_dev_debug_info>())).min_cb_level as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_dev_debug_info),
            "::",
            stringify!(min_cb_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_dev_debug_info>())).max_cb_level as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_dev_debug_info),
            "::",
            stringify!(max_cb_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_dev_debug_info>())).frame_rate as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_dev_debug_info),
            "::",
            stringify!(frame_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_dev_debug_info>())).num_channels as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_dev_debug_info),
            "::",
            stringify!(num_channels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_dev_debug_info>())).est_rate_ratio as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_dev_debug_info),
            "::",
            stringify!(est_rate_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_dev_debug_info>())).direction as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_dev_debug_info),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_dev_debug_info>())).num_underruns as *const _ as usize
        },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_dev_debug_info),
            "::",
            stringify!(num_underruns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_dev_debug_info>())).num_severe_underruns as *const _
                as usize
        },
        101usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_dev_debug_info),
            "::",
            stringify!(num_severe_underruns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_dev_debug_info>())).highest_hw_level as *const _ as usize
        },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_dev_debug_info),
            "::",
            stringify!(highest_hw_level)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct audio_stream_debug_info {
    pub stream_id: u64,
    pub dev_idx: u32,
    pub direction: u32,
    pub stream_type: u32,
    pub buffer_frames: u32,
    pub cb_threshold: u32,
    pub effects: u64,
    pub flags: u32,
    pub frame_rate: u32,
    pub num_channels: u32,
    pub longest_fetch_sec: u32,
    pub longest_fetch_nsec: u32,
    pub num_overruns: u32,
    pub channel_layout: [i8; 11usize],
}
#[test]
fn bindgen_test_layout_audio_stream_debug_info() {
    assert_eq!(
        ::std::mem::size_of::<audio_stream_debug_info>(),
        71usize,
        concat!("Size of: ", stringify!(audio_stream_debug_info))
    );
    assert_eq!(
        ::std::mem::align_of::<audio_stream_debug_info>(),
        1usize,
        concat!("Alignment of ", stringify!(audio_stream_debug_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_stream_debug_info>())).stream_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_stream_debug_info),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_stream_debug_info>())).dev_idx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_stream_debug_info),
            "::",
            stringify!(dev_idx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_stream_debug_info>())).direction as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_stream_debug_info),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_stream_debug_info>())).stream_type as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_stream_debug_info),
            "::",
            stringify!(stream_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_stream_debug_info>())).buffer_frames as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_stream_debug_info),
            "::",
            stringify!(buffer_frames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_stream_debug_info>())).cb_threshold as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_stream_debug_info),
            "::",
            stringify!(cb_threshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_stream_debug_info>())).effects as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_stream_debug_info),
            "::",
            stringify!(effects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_stream_debug_info>())).flags as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_stream_debug_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_stream_debug_info>())).frame_rate as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_stream_debug_info),
            "::",
            stringify!(frame_rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_stream_debug_info>())).num_channels as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_stream_debug_info),
            "::",
            stringify!(num_channels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_stream_debug_info>())).longest_fetch_sec as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_stream_debug_info),
            "::",
            stringify!(longest_fetch_sec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_stream_debug_info>())).longest_fetch_nsec as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_stream_debug_info),
            "::",
            stringify!(longest_fetch_nsec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_stream_debug_info>())).num_overruns as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_stream_debug_info),
            "::",
            stringify!(num_overruns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<audio_stream_debug_info>())).channel_layout as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_stream_debug_info),
            "::",
            stringify!(channel_layout)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct audio_debug_info {
    pub num_streams: u32,
    pub num_devs: u32,
    pub devs: [audio_dev_debug_info; 4usize],
    pub streams: [audio_stream_debug_info; 8usize],
    pub log: audio_thread_event_log,
}
#[test]
fn bindgen_test_layout_audio_debug_info() {
    assert_eq!(
        ::std::mem::size_of::<audio_debug_info>(),
        123900usize,
        concat!("Size of: ", stringify!(audio_debug_info))
    );
    assert_eq!(
        ::std::mem::align_of::<audio_debug_info>(),
        1usize,
        concat!("Alignment of ", stringify!(audio_debug_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_debug_info>())).num_streams as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_debug_info),
            "::",
            stringify!(num_streams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_debug_info>())).num_devs as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_debug_info),
            "::",
            stringify!(num_devs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_debug_info>())).devs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_debug_info),
            "::",
            stringify!(devs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_debug_info>())).streams as *const _ as usize },
        444usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_debug_info),
            "::",
            stringify!(streams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_debug_info>())).log as *const _ as usize },
        1012usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_debug_info),
            "::",
            stringify!(log)
        )
    );
}
pub mod CRAS_AUDIO_THREAD_EVENT_TYPE {
    pub type Type = u32;
    pub const AUDIO_THREAD_EVENT_BUSYLOOP: Type = 0;
    pub const AUDIO_THREAD_EVENT_DEBUG: Type = 1;
    pub const AUDIO_THREAD_EVENT_SEVERE_UNDERRUN: Type = 2;
    pub const AUDIO_THREAD_EVENT_UNDERRUN: Type = 3;
    pub const AUDIO_THREAD_EVENT_TYPE_COUNT: Type = 4;
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct cras_audio_thread_snapshot {
    pub timestamp: timespec,
    pub event_type: CRAS_AUDIO_THREAD_EVENT_TYPE::Type,
    pub audio_debug_info: audio_debug_info,
}
#[test]
fn bindgen_test_layout_cras_audio_thread_snapshot() {
    assert_eq!(
        ::std::mem::size_of::<cras_audio_thread_snapshot>(),
        123920usize,
        concat!("Size of: ", stringify!(cras_audio_thread_snapshot))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_audio_thread_snapshot>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_audio_thread_snapshot))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_audio_thread_snapshot>())).timestamp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_audio_thread_snapshot),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_audio_thread_snapshot>())).event_type as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_audio_thread_snapshot),
            "::",
            stringify!(event_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_audio_thread_snapshot>())).audio_debug_info as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_audio_thread_snapshot),
            "::",
            stringify!(audio_debug_info)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct cras_audio_thread_snapshot_buffer {
    pub snapshots: [cras_audio_thread_snapshot; 10usize],
    pub pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cras_audio_thread_snapshot_buffer() {
    assert_eq!(
        ::std::mem::size_of::<cras_audio_thread_snapshot_buffer>(),
        1239204usize,
        concat!("Size of: ", stringify!(cras_audio_thread_snapshot_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_audio_thread_snapshot_buffer>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(cras_audio_thread_snapshot_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_audio_thread_snapshot_buffer>())).snapshots as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_audio_thread_snapshot_buffer),
            "::",
            stringify!(snapshots)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_audio_thread_snapshot_buffer>())).pos as *const _ as usize
        },
        1239200usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_audio_thread_snapshot_buffer),
            "::",
            stringify!(pos)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct cras_server_state {
    pub state_version: u32,
    pub volume: u32,
    pub min_volume_dBFS: i32,
    pub max_volume_dBFS: i32,
    pub mute: i32,
    pub user_mute: i32,
    pub mute_locked: i32,
    pub suspended: i32,
    pub capture_gain: i32,
    pub capture_gain_target: i32,
    pub capture_mute: i32,
    pub capture_mute_locked: i32,
    pub min_capture_gain: i32,
    pub max_capture_gain: i32,
    pub num_streams_attached: u32,
    pub num_output_devs: u32,
    pub num_input_devs: u32,
    pub output_devs: [cras_iodev_info; 20usize],
    pub input_devs: [cras_iodev_info; 20usize],
    pub num_output_nodes: u32,
    pub num_input_nodes: u32,
    pub output_nodes: [cras_ionode_info; 20usize],
    pub input_nodes: [cras_ionode_info; 20usize],
    pub num_attached_clients: u32,
    pub client_info: [cras_attached_client_info; 20usize],
    pub update_count: u32,
    pub num_active_streams: [u32; 4usize],
    pub last_active_stream_time: cras_timespec,
    pub audio_debug_info: audio_debug_info,
    pub default_output_buffer_size: i32,
    pub non_empty_status: i32,
    pub aec_supported: i32,
    pub snapshot_buffer: cras_audio_thread_snapshot_buffer,
}
#[test]
fn bindgen_test_layout_cras_server_state() {
    assert_eq!(
        ::std::mem::size_of::<cras_server_state>(),
        1378432usize,
        concat!("Size of: ", stringify!(cras_server_state))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_server_state>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_server_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_server_state>())).state_version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(state_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_server_state>())).volume as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(volume)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_server_state>())).min_volume_dBFS as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(min_volume_dBFS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_server_state>())).max_volume_dBFS as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(max_volume_dBFS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_server_state>())).mute as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(mute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_server_state>())).user_mute as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(user_mute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_server_state>())).mute_locked as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(mute_locked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_server_state>())).suspended as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(suspended)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_server_state>())).capture_gain as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(capture_gain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_server_state>())).capture_gain_target as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(capture_gain_target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_server_state>())).capture_mute as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(capture_mute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_server_state>())).capture_mute_locked as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(capture_mute_locked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_server_state>())).min_capture_gain as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(min_capture_gain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_server_state>())).max_capture_gain as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(max_capture_gain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_server_state>())).num_streams_attached as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(num_streams_attached)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_server_state>())).num_output_devs as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(num_output_devs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_server_state>())).num_input_devs as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(num_input_devs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_server_state>())).output_devs as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(output_devs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_server_state>())).input_devs as *const _ as usize },
        1588usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(input_devs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_server_state>())).num_output_nodes as *const _ as usize
        },
        3108usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(num_output_nodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_server_state>())).num_input_nodes as *const _ as usize
        },
        3112usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(num_input_nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_server_state>())).output_nodes as *const _ as usize },
        3116usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(output_nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_server_state>())).input_nodes as *const _ as usize },
        9036usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(input_nodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_server_state>())).num_attached_clients as *const _ as usize
        },
        14956usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(num_attached_clients)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_server_state>())).client_info as *const _ as usize },
        14960usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(client_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_server_state>())).update_count as *const _ as usize },
        15280usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(update_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_server_state>())).num_active_streams as *const _ as usize
        },
        15284usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(num_active_streams)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_server_state>())).last_active_stream_time as *const _
                as usize
        },
        15300usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(last_active_stream_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_server_state>())).audio_debug_info as *const _ as usize
        },
        15316usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(audio_debug_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_server_state>())).default_output_buffer_size as *const _
                as usize
        },
        139216usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(default_output_buffer_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_server_state>())).non_empty_status as *const _ as usize
        },
        139220usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(non_empty_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_server_state>())).aec_supported as *const _ as usize },
        139224usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(aec_supported)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_server_state>())).snapshot_buffer as *const _ as usize
        },
        139228usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_state),
            "::",
            stringify!(snapshot_buffer)
        )
    );
}
pub const cras_notify_device_action_CRAS_DEVICE_ACTION_ADD: cras_notify_device_action = 0;
pub const cras_notify_device_action_CRAS_DEVICE_ACTION_REMOVE: cras_notify_device_action = 1;
pub const cras_notify_device_action_CRAS_DEVICE_ACTION_CHANGE: cras_notify_device_action = 2;
pub type cras_notify_device_action = u32;
pub mod CRAS_ALSA_CARD_TYPE {
    pub type Type = u32;
    pub const ALSA_CARD_TYPE_INTERNAL: Type = 0;
    pub const ALSA_CARD_TYPE_USB: Type = 1;
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct cras_alsa_card_info {
    pub card_type: CRAS_ALSA_CARD_TYPE::Type,
    pub card_index: u32,
    pub usb_vendor_id: u32,
    pub usb_product_id: u32,
    pub usb_serial_number: [::std::os::raw::c_char; 64usize],
    pub usb_desc_checksum: u32,
}
#[test]
fn bindgen_test_layout_cras_alsa_card_info() {
    assert_eq!(
        ::std::mem::size_of::<cras_alsa_card_info>(),
        84usize,
        concat!("Size of: ", stringify!(cras_alsa_card_info))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_alsa_card_info>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_alsa_card_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_alsa_card_info>())).card_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_alsa_card_info),
            "::",
            stringify!(card_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_alsa_card_info>())).card_index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_alsa_card_info),
            "::",
            stringify!(card_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_alsa_card_info>())).usb_vendor_id as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_alsa_card_info),
            "::",
            stringify!(usb_vendor_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_alsa_card_info>())).usb_product_id as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_alsa_card_info),
            "::",
            stringify!(usb_product_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_alsa_card_info>())).usb_serial_number as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_alsa_card_info),
            "::",
            stringify!(usb_serial_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_alsa_card_info>())).usb_desc_checksum as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_alsa_card_info),
            "::",
            stringify!(usb_desc_checksum)
        )
    );
}
pub type cras_stream_id_t = u32;
pub mod CRAS_NODE_TYPE {
    pub type Type = u32;
    pub const CRAS_NODE_TYPE_INTERNAL_SPEAKER: Type = 0;
    pub const CRAS_NODE_TYPE_HEADPHONE: Type = 1;
    pub const CRAS_NODE_TYPE_HDMI: Type = 2;
    pub const CRAS_NODE_TYPE_HAPTIC: Type = 3;
    pub const CRAS_NODE_TYPE_LINEOUT: Type = 4;
    pub const CRAS_NODE_TYPE_MIC: Type = 5;
    pub const CRAS_NODE_TYPE_HOTWORD: Type = 6;
    pub const CRAS_NODE_TYPE_POST_MIX_PRE_DSP: Type = 7;
    pub const CRAS_NODE_TYPE_POST_DSP: Type = 8;
    pub const CRAS_NODE_TYPE_USB: Type = 9;
    pub const CRAS_NODE_TYPE_BLUETOOTH: Type = 10;
    pub const CRAS_NODE_TYPE_UNKNOWN: Type = 11;
}
pub mod CRAS_NODE_POSITION {
    pub type Type = u32;
    pub const NODE_POSITION_EXTERNAL: Type = 0;
    pub const NODE_POSITION_INTERNAL: Type = 1;
    pub const NODE_POSITION_FRONT: Type = 2;
    pub const NODE_POSITION_REAR: Type = 3;
    pub const NODE_POSITION_KEYBOARD: Type = 4;
}
pub mod CRAS_SERVER_MESSAGE_ID {
    pub type Type = u32;
    pub const CRAS_SERVER_CONNECT_STREAM: Type = 0;
    pub const CRAS_SERVER_DISCONNECT_STREAM: Type = 1;
    pub const CRAS_SERVER_SWITCH_STREAM_TYPE_IODEV: Type = 2;
    pub const CRAS_SERVER_SET_SYSTEM_VOLUME: Type = 3;
    pub const CRAS_SERVER_SET_SYSTEM_MUTE: Type = 4;
    pub const CRAS_SERVER_SET_USER_MUTE: Type = 5;
    pub const CRAS_SERVER_SET_SYSTEM_MUTE_LOCKED: Type = 6;
    pub const CRAS_SERVER_SET_SYSTEM_CAPTURE_GAIN: Type = 7;
    pub const CRAS_SERVER_SET_SYSTEM_CAPTURE_MUTE: Type = 8;
    pub const CRAS_SERVER_SET_SYSTEM_CAPTURE_MUTE_LOCKED: Type = 9;
    pub const CRAS_SERVER_SET_NODE_ATTR: Type = 10;
    pub const CRAS_SERVER_SELECT_NODE: Type = 11;
    pub const CRAS_SERVER_RELOAD_DSP: Type = 12;
    pub const CRAS_SERVER_DUMP_DSP_INFO: Type = 13;
    pub const CRAS_SERVER_DUMP_AUDIO_THREAD: Type = 14;
    pub const CRAS_SERVER_DUMP_SNAPSHOTS: Type = 15;
    pub const CRAS_SERVER_ADD_ACTIVE_NODE: Type = 16;
    pub const CRAS_SERVER_RM_ACTIVE_NODE: Type = 17;
    pub const CRAS_SERVER_ADD_TEST_DEV: Type = 18;
    pub const CRAS_SERVER_TEST_DEV_COMMAND: Type = 19;
    pub const CRAS_SERVER_SUSPEND: Type = 20;
    pub const CRAS_SERVER_RESUME: Type = 21;
    pub const CRAS_CONFIG_GLOBAL_REMIX: Type = 22;
    pub const CRAS_SERVER_GET_HOTWORD_MODELS: Type = 23;
    pub const CRAS_SERVER_SET_HOTWORD_MODEL: Type = 24;
    pub const CRAS_SERVER_REGISTER_NOTIFICATION: Type = 25;
    pub const CRAS_SERVER_SET_AEC_DUMP: Type = 26;
    pub const CRAS_SERVER_RELOAD_AEC_CONFIG: Type = 27;
}
pub mod CRAS_CLIENT_MESSAGE_ID {
    pub type Type = u32;
    pub const CRAS_CLIENT_CONNECTED: Type = 0;
    pub const CRAS_CLIENT_STREAM_CONNECTED: Type = 1;
    pub const CRAS_CLIENT_AUDIO_DEBUG_INFO_READY: Type = 2;
    pub const CRAS_CLIENT_GET_HOTWORD_MODELS_READY: Type = 3;
    pub const CRAS_CLIENT_OUTPUT_VOLUME_CHANGED: Type = 4;
    pub const CRAS_CLIENT_OUTPUT_MUTE_CHANGED: Type = 5;
    pub const CRAS_CLIENT_CAPTURE_GAIN_CHANGED: Type = 6;
    pub const CRAS_CLIENT_CAPTURE_MUTE_CHANGED: Type = 7;
    pub const CRAS_CLIENT_NODES_CHANGED: Type = 8;
    pub const CRAS_CLIENT_ACTIVE_NODE_CHANGED: Type = 9;
    pub const CRAS_CLIENT_OUTPUT_NODE_VOLUME_CHANGED: Type = 10;
    pub const CRAS_CLIENT_NODE_LEFT_RIGHT_SWAPPED_CHANGED: Type = 11;
    pub const CRAS_CLIENT_INPUT_NODE_GAIN_CHANGED: Type = 12;
    pub const CRAS_CLIENT_NUM_ACTIVE_STREAMS_CHANGED: Type = 13;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_server_message {
    pub length: u32,
    pub id: CRAS_SERVER_MESSAGE_ID::Type,
}
#[test]
fn bindgen_test_layout_cras_server_message() {
    assert_eq!(
        ::std::mem::size_of::<cras_server_message>(),
        8usize,
        concat!("Size of: ", stringify!(cras_server_message))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_server_message>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_server_message))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_server_message>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_message),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_server_message>())).id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_server_message),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_client_message {
    pub length: u32,
    pub id: CRAS_CLIENT_MESSAGE_ID::Type,
}
#[test]
fn bindgen_test_layout_cras_client_message() {
    assert_eq!(
        ::std::mem::size_of::<cras_client_message>(),
        8usize,
        concat!("Size of: ", stringify!(cras_client_message))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_client_message>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_client_message))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_client_message>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_message),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_client_message>())).id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_message),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_connect_message {
    pub header: cras_server_message,
    pub proto_version: u32,
    pub direction: CRAS_STREAM_DIRECTION::Type,
    pub stream_id: cras_stream_id_t,
    pub stream_type: CRAS_STREAM_TYPE::Type,
    pub buffer_frames: u32,
    pub cb_threshold: u32,
    pub flags: u32,
    pub format: cras_audio_format_packed,
    pub dev_idx: u32,
    pub effects: u64,
}
#[test]
fn bindgen_test_layout_cras_connect_message() {
    assert_eq!(
        ::std::mem::size_of::<cras_connect_message>(),
        71usize,
        concat!("Size of: ", stringify!(cras_connect_message))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_connect_message>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_connect_message))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_connect_message>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_connect_message>())).proto_version as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message),
            "::",
            stringify!(proto_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_connect_message>())).direction as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_connect_message>())).stream_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_connect_message>())).stream_type as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message),
            "::",
            stringify!(stream_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_connect_message>())).buffer_frames as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message),
            "::",
            stringify!(buffer_frames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_connect_message>())).cb_threshold as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message),
            "::",
            stringify!(cb_threshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_connect_message>())).flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_connect_message>())).format as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_connect_message>())).dev_idx as *const _ as usize },
        59usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message),
            "::",
            stringify!(dev_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_connect_message>())).effects as *const _ as usize },
        63usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message),
            "::",
            stringify!(effects)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_connect_message_old {
    pub header: cras_server_message,
    pub proto_version: u32,
    pub direction: CRAS_STREAM_DIRECTION::Type,
    pub stream_id: cras_stream_id_t,
    pub stream_type: CRAS_STREAM_TYPE::Type,
    pub buffer_frames: u32,
    pub cb_threshold: u32,
    pub flags: u32,
    pub format: cras_audio_format_packed,
    pub dev_idx: u32,
}
#[test]
fn bindgen_test_layout_cras_connect_message_old() {
    assert_eq!(
        ::std::mem::size_of::<cras_connect_message_old>(),
        63usize,
        concat!("Size of: ", stringify!(cras_connect_message_old))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_connect_message_old>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_connect_message_old))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_connect_message_old>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message_old),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_connect_message_old>())).proto_version as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message_old),
            "::",
            stringify!(proto_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_connect_message_old>())).direction as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message_old),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_connect_message_old>())).stream_id as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message_old),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_connect_message_old>())).stream_type as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message_old),
            "::",
            stringify!(stream_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_connect_message_old>())).buffer_frames as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message_old),
            "::",
            stringify!(buffer_frames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_connect_message_old>())).cb_threshold as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message_old),
            "::",
            stringify!(cb_threshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_connect_message_old>())).flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message_old),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_connect_message_old>())).format as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message_old),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_connect_message_old>())).dev_idx as *const _ as usize
        },
        59usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_connect_message_old),
            "::",
            stringify!(dev_idx)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_disconnect_stream_message {
    pub header: cras_server_message,
    pub stream_id: cras_stream_id_t,
}
#[test]
fn bindgen_test_layout_cras_disconnect_stream_message() {
    assert_eq!(
        ::std::mem::size_of::<cras_disconnect_stream_message>(),
        12usize,
        concat!("Size of: ", stringify!(cras_disconnect_stream_message))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_disconnect_stream_message>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_disconnect_stream_message))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_disconnect_stream_message>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_disconnect_stream_message),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_disconnect_stream_message>())).stream_id as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_disconnect_stream_message),
            "::",
            stringify!(stream_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_switch_stream_type_iodev {
    pub header: cras_server_message,
    pub stream_type: CRAS_STREAM_TYPE::Type,
    pub iodev_idx: u32,
}
#[test]
fn bindgen_test_layout_cras_switch_stream_type_iodev() {
    assert_eq!(
        ::std::mem::size_of::<cras_switch_stream_type_iodev>(),
        16usize,
        concat!("Size of: ", stringify!(cras_switch_stream_type_iodev))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_switch_stream_type_iodev>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_switch_stream_type_iodev))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_switch_stream_type_iodev>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_switch_stream_type_iodev),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_switch_stream_type_iodev>())).stream_type as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_switch_stream_type_iodev),
            "::",
            stringify!(stream_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_switch_stream_type_iodev>())).iodev_idx as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_switch_stream_type_iodev),
            "::",
            stringify!(iodev_idx)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_set_system_volume {
    pub header: cras_server_message,
    pub volume: u32,
}
#[test]
fn bindgen_test_layout_cras_set_system_volume() {
    assert_eq!(
        ::std::mem::size_of::<cras_set_system_volume>(),
        12usize,
        concat!("Size of: ", stringify!(cras_set_system_volume))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_set_system_volume>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_set_system_volume))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_set_system_volume>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_set_system_volume),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_set_system_volume>())).volume as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_set_system_volume),
            "::",
            stringify!(volume)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_set_system_capture_gain {
    pub header: cras_server_message,
    pub gain: i32,
}
#[test]
fn bindgen_test_layout_cras_set_system_capture_gain() {
    assert_eq!(
        ::std::mem::size_of::<cras_set_system_capture_gain>(),
        12usize,
        concat!("Size of: ", stringify!(cras_set_system_capture_gain))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_set_system_capture_gain>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_set_system_capture_gain))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_set_system_capture_gain>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_set_system_capture_gain),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_set_system_capture_gain>())).gain as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_set_system_capture_gain),
            "::",
            stringify!(gain)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_set_system_mute {
    pub header: cras_server_message,
    pub mute: i32,
}
#[test]
fn bindgen_test_layout_cras_set_system_mute() {
    assert_eq!(
        ::std::mem::size_of::<cras_set_system_mute>(),
        12usize,
        concat!("Size of: ", stringify!(cras_set_system_mute))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_set_system_mute>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_set_system_mute))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_set_system_mute>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_set_system_mute),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_set_system_mute>())).mute as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_set_system_mute),
            "::",
            stringify!(mute)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_set_node_attr {
    pub header: cras_server_message,
    pub node_id: cras_node_id_t,
    pub attr: ionode_attr,
    pub value: i32,
}
#[test]
fn bindgen_test_layout_cras_set_node_attr() {
    assert_eq!(
        ::std::mem::size_of::<cras_set_node_attr>(),
        24usize,
        concat!("Size of: ", stringify!(cras_set_node_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_set_node_attr>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_set_node_attr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_set_node_attr>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_set_node_attr),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_set_node_attr>())).node_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_set_node_attr),
            "::",
            stringify!(node_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_set_node_attr>())).attr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_set_node_attr),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_set_node_attr>())).value as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_set_node_attr),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_select_node {
    pub header: cras_server_message,
    pub direction: CRAS_STREAM_DIRECTION::Type,
    pub node_id: cras_node_id_t,
}
#[test]
fn bindgen_test_layout_cras_select_node() {
    assert_eq!(
        ::std::mem::size_of::<cras_select_node>(),
        20usize,
        concat!("Size of: ", stringify!(cras_select_node))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_select_node>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_select_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_select_node>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_select_node),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_select_node>())).direction as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_select_node),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_select_node>())).node_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_select_node),
            "::",
            stringify!(node_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_add_active_node {
    pub header: cras_server_message,
    pub direction: CRAS_STREAM_DIRECTION::Type,
    pub node_id: cras_node_id_t,
}
#[test]
fn bindgen_test_layout_cras_add_active_node() {
    assert_eq!(
        ::std::mem::size_of::<cras_add_active_node>(),
        20usize,
        concat!("Size of: ", stringify!(cras_add_active_node))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_add_active_node>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_add_active_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_add_active_node>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_add_active_node),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_add_active_node>())).direction as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_add_active_node),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_add_active_node>())).node_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_add_active_node),
            "::",
            stringify!(node_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_rm_active_node {
    pub header: cras_server_message,
    pub direction: CRAS_STREAM_DIRECTION::Type,
    pub node_id: cras_node_id_t,
}
#[test]
fn bindgen_test_layout_cras_rm_active_node() {
    assert_eq!(
        ::std::mem::size_of::<cras_rm_active_node>(),
        20usize,
        concat!("Size of: ", stringify!(cras_rm_active_node))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_rm_active_node>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_rm_active_node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_rm_active_node>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_rm_active_node),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_rm_active_node>())).direction as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_rm_active_node),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_rm_active_node>())).node_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_rm_active_node),
            "::",
            stringify!(node_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_reload_dsp {
    pub header: cras_server_message,
}
#[test]
fn bindgen_test_layout_cras_reload_dsp() {
    assert_eq!(
        ::std::mem::size_of::<cras_reload_dsp>(),
        8usize,
        concat!("Size of: ", stringify!(cras_reload_dsp))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_reload_dsp>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_reload_dsp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_reload_dsp>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_reload_dsp),
            "::",
            stringify!(header)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_dump_dsp_info {
    pub header: cras_server_message,
}
#[test]
fn bindgen_test_layout_cras_dump_dsp_info() {
    assert_eq!(
        ::std::mem::size_of::<cras_dump_dsp_info>(),
        8usize,
        concat!("Size of: ", stringify!(cras_dump_dsp_info))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_dump_dsp_info>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_dump_dsp_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_dump_dsp_info>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_dump_dsp_info),
            "::",
            stringify!(header)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_dump_audio_thread {
    pub header: cras_server_message,
}
#[test]
fn bindgen_test_layout_cras_dump_audio_thread() {
    assert_eq!(
        ::std::mem::size_of::<cras_dump_audio_thread>(),
        8usize,
        concat!("Size of: ", stringify!(cras_dump_audio_thread))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_dump_audio_thread>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_dump_audio_thread))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_dump_audio_thread>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_dump_audio_thread),
            "::",
            stringify!(header)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_dump_snapshots {
    pub header: cras_server_message,
}
#[test]
fn bindgen_test_layout_cras_dump_snapshots() {
    assert_eq!(
        ::std::mem::size_of::<cras_dump_snapshots>(),
        8usize,
        concat!("Size of: ", stringify!(cras_dump_snapshots))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_dump_snapshots>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_dump_snapshots))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_dump_snapshots>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_dump_snapshots),
            "::",
            stringify!(header)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_add_test_dev {
    pub header: cras_server_message,
    pub type_: TEST_IODEV_TYPE,
}
#[test]
fn bindgen_test_layout_cras_add_test_dev() {
    assert_eq!(
        ::std::mem::size_of::<cras_add_test_dev>(),
        12usize,
        concat!("Size of: ", stringify!(cras_add_test_dev))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_add_test_dev>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_add_test_dev))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_add_test_dev>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_add_test_dev),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_add_test_dev>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_add_test_dev),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct cras_test_dev_command {
    pub header: cras_server_message,
    pub command: ::std::os::raw::c_uint,
    pub iodev_idx: ::std::os::raw::c_uint,
    pub data_len: ::std::os::raw::c_uint,
    pub data: [u8; 224usize],
}
#[test]
fn bindgen_test_layout_cras_test_dev_command() {
    assert_eq!(
        ::std::mem::size_of::<cras_test_dev_command>(),
        244usize,
        concat!("Size of: ", stringify!(cras_test_dev_command))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_test_dev_command>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_test_dev_command))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_test_dev_command>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_test_dev_command),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_test_dev_command>())).command as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_test_dev_command),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_test_dev_command>())).iodev_idx as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_test_dev_command),
            "::",
            stringify!(iodev_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_test_dev_command>())).data_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_test_dev_command),
            "::",
            stringify!(data_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_test_dev_command>())).data as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_test_dev_command),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_config_global_remix {
    pub header: cras_server_message,
    pub num_channels: ::std::os::raw::c_uint,
    pub coefficient: [f32; 32usize],
}
#[test]
fn bindgen_test_layout_cras_config_global_remix() {
    assert_eq!(
        ::std::mem::size_of::<cras_config_global_remix>(),
        140usize,
        concat!("Size of: ", stringify!(cras_config_global_remix))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_config_global_remix>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_config_global_remix))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_config_global_remix>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_config_global_remix),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_config_global_remix>())).num_channels as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_config_global_remix),
            "::",
            stringify!(num_channels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_config_global_remix>())).coefficient as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_config_global_remix),
            "::",
            stringify!(coefficient)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_get_hotword_models {
    pub header: cras_server_message,
    pub node_id: cras_node_id_t,
}
#[test]
fn bindgen_test_layout_cras_get_hotword_models() {
    assert_eq!(
        ::std::mem::size_of::<cras_get_hotword_models>(),
        16usize,
        concat!("Size of: ", stringify!(cras_get_hotword_models))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_get_hotword_models>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_get_hotword_models))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_get_hotword_models>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_get_hotword_models),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_get_hotword_models>())).node_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_get_hotword_models),
            "::",
            stringify!(node_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_set_hotword_model {
    pub header: cras_server_message,
    pub node_id: cras_node_id_t,
    pub model_name: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_cras_set_hotword_model() {
    assert_eq!(
        ::std::mem::size_of::<cras_set_hotword_model>(),
        24usize,
        concat!("Size of: ", stringify!(cras_set_hotword_model))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_set_hotword_model>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_set_hotword_model))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_set_hotword_model>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_set_hotword_model),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_set_hotword_model>())).node_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_set_hotword_model),
            "::",
            stringify!(node_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_set_hotword_model>())).model_name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_set_hotword_model),
            "::",
            stringify!(model_name)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_set_aec_dump {
    pub header: cras_server_message,
    pub stream_id: cras_stream_id_t,
    pub start: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cras_set_aec_dump() {
    assert_eq!(
        ::std::mem::size_of::<cras_set_aec_dump>(),
        16usize,
        concat!("Size of: ", stringify!(cras_set_aec_dump))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_set_aec_dump>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_set_aec_dump))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_set_aec_dump>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_set_aec_dump),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_set_aec_dump>())).stream_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_set_aec_dump),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_set_aec_dump>())).start as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_set_aec_dump),
            "::",
            stringify!(start)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_reload_aec_config {
    pub header: cras_server_message,
}
#[test]
fn bindgen_test_layout_cras_reload_aec_config() {
    assert_eq!(
        ::std::mem::size_of::<cras_reload_aec_config>(),
        8usize,
        concat!("Size of: ", stringify!(cras_reload_aec_config))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_reload_aec_config>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_reload_aec_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_reload_aec_config>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_reload_aec_config),
            "::",
            stringify!(header)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_register_notification {
    pub header: cras_server_message,
    pub msg_id: u32,
    pub do_register: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cras_register_notification() {
    assert_eq!(
        ::std::mem::size_of::<cras_register_notification>(),
        16usize,
        concat!("Size of: ", stringify!(cras_register_notification))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_register_notification>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_register_notification))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_register_notification>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_register_notification),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_register_notification>())).msg_id as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_register_notification),
            "::",
            stringify!(msg_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_register_notification>())).do_register as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_register_notification),
            "::",
            stringify!(do_register)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_client_connected {
    pub header: cras_client_message,
    pub client_id: u32,
}
#[test]
fn bindgen_test_layout_cras_client_connected() {
    assert_eq!(
        ::std::mem::size_of::<cras_client_connected>(),
        12usize,
        concat!("Size of: ", stringify!(cras_client_connected))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_client_connected>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_client_connected))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_client_connected>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_connected),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_client_connected>())).client_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_connected),
            "::",
            stringify!(client_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_client_stream_connected {
    pub header: cras_client_message,
    pub err: i32,
    pub stream_id: cras_stream_id_t,
    pub format: cras_audio_format_packed,
    pub shm_max_size: u32,
    pub effects: u64,
}
#[test]
fn bindgen_test_layout_cras_client_stream_connected() {
    assert_eq!(
        ::std::mem::size_of::<cras_client_stream_connected>(),
        51usize,
        concat!("Size of: ", stringify!(cras_client_stream_connected))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_client_stream_connected>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_client_stream_connected))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_stream_connected>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_stream_connected),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_stream_connected>())).err as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_stream_connected),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_stream_connected>())).stream_id as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_stream_connected),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_stream_connected>())).format as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_stream_connected),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_stream_connected>())).shm_max_size as *const _
                as usize
        },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_stream_connected),
            "::",
            stringify!(shm_max_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_stream_connected>())).effects as *const _ as usize
        },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_stream_connected),
            "::",
            stringify!(effects)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_client_stream_connected_old {
    pub header: cras_client_message,
    pub err: i32,
    pub stream_id: cras_stream_id_t,
    pub format: cras_audio_format_packed,
    pub shm_max_size: u32,
}
#[test]
fn bindgen_test_layout_cras_client_stream_connected_old() {
    assert_eq!(
        ::std::mem::size_of::<cras_client_stream_connected_old>(),
        43usize,
        concat!("Size of: ", stringify!(cras_client_stream_connected_old))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_client_stream_connected_old>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(cras_client_stream_connected_old)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_stream_connected_old>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_stream_connected_old),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_stream_connected_old>())).err as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_stream_connected_old),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_stream_connected_old>())).stream_id as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_stream_connected_old),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_stream_connected_old>())).format as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_stream_connected_old),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_stream_connected_old>())).shm_max_size as *const _
                as usize
        },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_stream_connected_old),
            "::",
            stringify!(shm_max_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cras_client_audio_debug_info_ready {
    pub header: cras_client_message,
}
#[test]
fn bindgen_test_layout_cras_client_audio_debug_info_ready() {
    assert_eq!(
        ::std::mem::size_of::<cras_client_audio_debug_info_ready>(),
        8usize,
        concat!("Size of: ", stringify!(cras_client_audio_debug_info_ready))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_client_audio_debug_info_ready>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(cras_client_audio_debug_info_ready)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_audio_debug_info_ready>())).header as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_audio_debug_info_ready),
            "::",
            stringify!(header)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cras_client_get_hotword_models_ready {
    pub header: cras_client_message,
    pub hotword_models_size: i32,
    pub hotword_models: [u8; 244usize],
}
#[test]
fn bindgen_test_layout_cras_client_get_hotword_models_ready() {
    assert_eq!(
        ::std::mem::size_of::<cras_client_get_hotword_models_ready>(),
        256usize,
        concat!(
            "Size of: ",
            stringify!(cras_client_get_hotword_models_ready)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cras_client_get_hotword_models_ready>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(cras_client_get_hotword_models_ready)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_get_hotword_models_ready>())).header as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_get_hotword_models_ready),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_get_hotword_models_ready>())).hotword_models_size
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_get_hotword_models_ready),
            "::",
            stringify!(hotword_models_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_get_hotword_models_ready>())).hotword_models
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_get_hotword_models_ready),
            "::",
            stringify!(hotword_models)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_client_volume_changed {
    pub header: cras_client_message,
    pub volume: i32,
}
#[test]
fn bindgen_test_layout_cras_client_volume_changed() {
    assert_eq!(
        ::std::mem::size_of::<cras_client_volume_changed>(),
        12usize,
        concat!("Size of: ", stringify!(cras_client_volume_changed))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_client_volume_changed>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_client_volume_changed))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_volume_changed>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_volume_changed),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_volume_changed>())).volume as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_volume_changed),
            "::",
            stringify!(volume)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_client_mute_changed {
    pub header: cras_client_message,
    pub muted: i32,
    pub user_muted: i32,
    pub mute_locked: i32,
}
#[test]
fn bindgen_test_layout_cras_client_mute_changed() {
    assert_eq!(
        ::std::mem::size_of::<cras_client_mute_changed>(),
        20usize,
        concat!("Size of: ", stringify!(cras_client_mute_changed))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_client_mute_changed>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_client_mute_changed))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_client_mute_changed>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_mute_changed),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cras_client_mute_changed>())).muted as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_mute_changed),
            "::",
            stringify!(muted)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_mute_changed>())).user_muted as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_mute_changed),
            "::",
            stringify!(user_muted)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_mute_changed>())).mute_locked as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_mute_changed),
            "::",
            stringify!(mute_locked)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_client_nodes_changed {
    pub header: cras_client_message,
}
#[test]
fn bindgen_test_layout_cras_client_nodes_changed() {
    assert_eq!(
        ::std::mem::size_of::<cras_client_nodes_changed>(),
        8usize,
        concat!("Size of: ", stringify!(cras_client_nodes_changed))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_client_nodes_changed>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_client_nodes_changed))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_nodes_changed>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_nodes_changed),
            "::",
            stringify!(header)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_client_active_node_changed {
    pub header: cras_client_message,
    pub direction: u32,
    pub node_id: cras_node_id_t,
}
#[test]
fn bindgen_test_layout_cras_client_active_node_changed() {
    assert_eq!(
        ::std::mem::size_of::<cras_client_active_node_changed>(),
        20usize,
        concat!("Size of: ", stringify!(cras_client_active_node_changed))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_client_active_node_changed>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_client_active_node_changed))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_active_node_changed>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_active_node_changed),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_active_node_changed>())).direction as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_active_node_changed),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_active_node_changed>())).node_id as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_active_node_changed),
            "::",
            stringify!(node_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_client_node_value_changed {
    pub header: cras_client_message,
    pub node_id: cras_node_id_t,
    pub value: i32,
}
#[test]
fn bindgen_test_layout_cras_client_node_value_changed() {
    assert_eq!(
        ::std::mem::size_of::<cras_client_node_value_changed>(),
        20usize,
        concat!("Size of: ", stringify!(cras_client_node_value_changed))
    );
    assert_eq!(
        ::std::mem::align_of::<cras_client_node_value_changed>(),
        1usize,
        concat!("Alignment of ", stringify!(cras_client_node_value_changed))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_node_value_changed>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_node_value_changed),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_node_value_changed>())).node_id as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_node_value_changed),
            "::",
            stringify!(node_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_node_value_changed>())).value as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_node_value_changed),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct cras_client_num_active_streams_changed {
    pub header: cras_client_message,
    pub direction: u32,
    pub num_active_streams: u32,
}
#[test]
fn bindgen_test_layout_cras_client_num_active_streams_changed() {
    assert_eq!(
        ::std::mem::size_of::<cras_client_num_active_streams_changed>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(cras_client_num_active_streams_changed)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<cras_client_num_active_streams_changed>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(cras_client_num_active_streams_changed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_num_active_streams_changed>())).header as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_num_active_streams_changed),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_num_active_streams_changed>())).direction as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_num_active_streams_changed),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cras_client_num_active_streams_changed>())).num_active_streams
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cras_client_num_active_streams_changed),
            "::",
            stringify!(num_active_streams)
        )
    );
}
pub mod CRAS_AUDIO_MESSAGE_ID {
    pub type Type = u32;
    pub const AUDIO_MESSAGE_REQUEST_DATA: Type = 0;
    pub const AUDIO_MESSAGE_DATA_READY: Type = 1;
    pub const AUDIO_MESSAGE_DATA_CAPTURED: Type = 2;
    pub const NUM_AUDIO_MESSAGES: Type = 3;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct audio_message {
    pub id: CRAS_AUDIO_MESSAGE_ID::Type,
    pub error: i32,
    pub frames: u32,
}
#[test]
fn bindgen_test_layout_audio_message() {
    assert_eq!(
        ::std::mem::size_of::<audio_message>(),
        12usize,
        concat!("Size of: ", stringify!(audio_message))
    );
    assert_eq!(
        ::std::mem::align_of::<audio_message>(),
        1usize,
        concat!("Alignment of ", stringify!(audio_message))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_message>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_message),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_message>())).error as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_message),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audio_message>())).frames as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_message),
            "::",
            stringify!(frames)
        )
    );
}
